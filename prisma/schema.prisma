// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

 
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  description    String?
  role          UserRole @default(USER)
  accounts      Account[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User?   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
 model Hostel {
  id String @id @default(uuid())
  name        String
  location    String
  description String
  price       Int
  amenities   Amenity[]  // Relation to Amenities
  images      Image[]    // Relation to Images
  bookings    Booking[]  // Relation to Bookings
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Amenity {
  id String @id @default(uuid())
  name     String
  hostelId String
  hostel   Hostel   @relation(fields: [hostelId], references: [id], onDelete: Cascade)
}

model Image {
  id String @id @default(uuid())
  url      String
  hostelId String
  hostel   Hostel   @relation(fields: [hostelId], references: [id], onDelete: Cascade)
}

model Booking {
  id String @id @default(uuid())
  startDate    DateTime
  endDate      DateTime
  guests       Int
  telNumber    String
  isPaid       Boolean @default(false)
  isCancelled  Boolean @default(false)
  isCompleted  Boolean @default(false)
  totalPrice   Int
  username     String?
  userId       String
  hostelId     String
  hostel       Hostel   @relation(fields: [hostelId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  @@unique([userId, hostelId])
}
 


 model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 }
 

 
 